/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ManagedZoneIAMMemberObservation struct {
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ManagedZone *string `json:"managedZone,omitempty" tf:"managed_zone,omitempty"`

	Member *string `json:"member,omitempty" tf:"member,omitempty"`

	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type ManagedZoneIAMMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedZone *string `json:"managedZone,omitempty" tf:"managed_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Member *string `json:"member,omitempty" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

// ManagedZoneIAMMemberSpec defines the desired state of ManagedZoneIAMMember
type ManagedZoneIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedZoneIAMMemberParameters `json:"forProvider"`
}

// ManagedZoneIAMMemberStatus defines the observed state of ManagedZoneIAMMember.
type ManagedZoneIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedZoneIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedZoneIAMMember is the Schema for the ManagedZoneIAMMembers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ManagedZoneIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.managedZone)",message="managedZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.member)",message="member is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.role)",message="role is a required parameter"
	Spec   ManagedZoneIAMMemberSpec   `json:"spec"`
	Status ManagedZoneIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedZoneIAMMemberList contains a list of ManagedZoneIAMMembers
type ManagedZoneIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedZoneIAMMember `json:"items"`
}

// Repository type metadata.
var (
	ManagedZoneIAMMember_Kind             = "ManagedZoneIAMMember"
	ManagedZoneIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedZoneIAMMember_Kind}.String()
	ManagedZoneIAMMember_KindAPIVersion   = ManagedZoneIAMMember_Kind + "." + CRDGroupVersion.String()
	ManagedZoneIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(ManagedZoneIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedZoneIAMMember{}, &ManagedZoneIAMMemberList{})
}
