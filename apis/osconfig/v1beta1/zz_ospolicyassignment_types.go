/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AptObservation struct {

	// Required. Package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AptParameters struct {

	// Required. Package name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type DebObservation struct {

	// Whether dependencies should also be installed. - install when false: rpm --upgrade --replacepkgs package.rpm - install when true: yum -y install package.rpm or zypper -y install package.rpm
	PullDeps *bool `json:"pullDeps,omitempty" tf:"pull_deps,omitempty"`

	// Required. An rpm package.
	Source []SourceObservation `json:"source,omitempty" tf:"source,omitempty"`
}

type DebParameters struct {

	// Whether dependencies should also be installed. - install when false: rpm --upgrade --replacepkgs package.rpm - install when true: yum -y install package.rpm or zypper -y install package.rpm
	// +kubebuilder:validation:Optional
	PullDeps *bool `json:"pullDeps,omitempty" tf:"pull_deps,omitempty"`

	// Required. An rpm package.
	// +kubebuilder:validation:Required
	Source []SourceParameters `json:"source" tf:"source,omitempty"`
}

type DisruptionBudgetObservation struct {

	// Specifies a fixed value.
	Fixed *float64 `json:"fixed,omitempty" tf:"fixed,omitempty"`

	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent *float64 `json:"percent,omitempty" tf:"percent,omitempty"`
}

type DisruptionBudgetParameters struct {

	// Specifies a fixed value.
	// +kubebuilder:validation:Optional
	Fixed *float64 `json:"fixed,omitempty" tf:"fixed,omitempty"`

	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	// +kubebuilder:validation:Optional
	Percent *float64 `json:"percent,omitempty" tf:"percent,omitempty"`
}

type EnforceObservation struct {

	// Optional arguments to pass to the source during execution.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// A remote or local file.
	File []FileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL
	Interpreter *string `json:"interpreter,omitempty" tf:"interpreter,omitempty"`

	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath *string `json:"outputFilePath,omitempty" tf:"output_file_path,omitempty"`

	// An inline script. The size of the script is limited to 1024 characters.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`
}

type EnforceParameters struct {

	// Optional arguments to pass to the source during execution.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// A remote or local file.
	// +kubebuilder:validation:Optional
	File []FileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL
	// +kubebuilder:validation:Required
	Interpreter *string `json:"interpreter" tf:"interpreter,omitempty"`

	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	// +kubebuilder:validation:Optional
	OutputFilePath *string `json:"outputFilePath,omitempty" tf:"output_file_path,omitempty"`

	// An inline script. The size of the script is limited to 1024 characters.
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`
}

type ExclusionLabelsObservation struct {

	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type ExclusionLabelsParameters struct {

	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type ExecObservation struct {

	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce []EnforceObservation `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// Required. What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate []ValidateObservation `json:"validate,omitempty" tf:"validate,omitempty"`
}

type ExecParameters struct {

	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	// +kubebuilder:validation:Optional
	Enforce []EnforceParameters `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// Required. What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	// +kubebuilder:validation:Required
	Validate []ValidateParameters `json:"validate" tf:"validate,omitempty"`
}

type FileFileGcsObservation struct {

	// Required. Bucket of the Cloud Storage object.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type FileFileGcsParameters struct {

	// Required. Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type FileFileObservation struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	Gcs []FileFileGcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	Remote []FileFileRemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type FileFileParameters struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	// +kubebuilder:validation:Optional
	Gcs []FileFileGcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	// +kubebuilder:validation:Optional
	Remote []FileFileRemoteParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type FileFileRemoteObservation struct {

	// SHA256 checksum of the remote file.
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type FileFileRemoteParameters struct {

	// SHA256 checksum of the remote file.
	// +kubebuilder:validation:Optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type FileGcsObservation struct {

	// Required. Bucket of the Cloud Storage object.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type FileGcsParameters struct {

	// Required. Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type FileObservation struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	Gcs []GcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	Remote []RemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type FileParameters struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	// +kubebuilder:validation:Optional
	Gcs []GcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	// +kubebuilder:validation:Optional
	Remote []RemoteParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type FileRemoteObservation struct {

	// SHA256 checksum of the remote file.
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type FileRemoteParameters struct {

	// SHA256 checksum of the remote file.
	// +kubebuilder:validation:Optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type GcsObservation struct {

	// Required. Bucket of the Cloud Storage object.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type GcsParameters struct {

	// Required. Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type GooObservation struct {

	// Required. Package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Required. The url of the repository.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type GooParameters struct {

	// Required. Package name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Required. The url of the repository.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type GoogetObservation struct {

	// Required. Package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GoogetParameters struct {

	// Required. Package name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type InclusionLabelsObservation struct {

	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type InclusionLabelsParameters struct {

	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type InstanceFilterObservation struct {

	// Target all VMs in the project. If true, no other criteria is permitted.
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
	ExclusionLabels []ExclusionLabelsObservation `json:"exclusionLabels,omitempty" tf:"exclusion_labels,omitempty"`

	// List of label sets used for VM inclusion. If the list has more than one LabelSet, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels []InclusionLabelsObservation `json:"inclusionLabels,omitempty" tf:"inclusion_labels,omitempty"`

	// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
	Inventories []InventoriesObservation `json:"inventories,omitempty" tf:"inventories,omitempty"`
}

type InstanceFilterParameters struct {

	// Target all VMs in the project. If true, no other criteria is permitted.
	// +kubebuilder:validation:Optional
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
	// +kubebuilder:validation:Optional
	ExclusionLabels []ExclusionLabelsParameters `json:"exclusionLabels,omitempty" tf:"exclusion_labels,omitempty"`

	// List of label sets used for VM inclusion. If the list has more than one LabelSet, the VM is included if any of the label sets are applicable for the VM.
	// +kubebuilder:validation:Optional
	InclusionLabels []InclusionLabelsParameters `json:"inclusionLabels,omitempty" tf:"inclusion_labels,omitempty"`

	// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
	// +kubebuilder:validation:Optional
	Inventories []InventoriesParameters `json:"inventories,omitempty" tf:"inventories,omitempty"`
}

type InventoriesObservation struct {

	// Required. The OS short name
	OsShortName *string `json:"osShortName,omitempty" tf:"os_short_name,omitempty"`

	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of 7, specify the following value for this field 7.* An empty string matches all OS versions.
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`
}

type InventoriesParameters struct {

	// Required. The OS short name
	// +kubebuilder:validation:Required
	OsShortName *string `json:"osShortName" tf:"os_short_name,omitempty"`

	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of 7, specify the following value for this field 7.* An empty string matches all OS versions.
	// +kubebuilder:validation:Optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`
}

type InventoryFiltersObservation struct {

	// Required. The OS short name
	OsShortName *string `json:"osShortName,omitempty" tf:"os_short_name,omitempty"`

	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of 7, specify the following value for this field 7.* An empty string matches all OS versions.
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`
}

type InventoryFiltersParameters struct {

	// Required. The OS short name
	// +kubebuilder:validation:Required
	OsShortName *string `json:"osShortName" tf:"os_short_name,omitempty"`

	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of 7, specify the following value for this field 7.* An empty string matches all OS versions.
	// +kubebuilder:validation:Optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`
}

type MsiObservation struct {

	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of ACTION=INSTALL REBOOT=ReallySuppress.
	Properties []*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// Required. An rpm package.
	Source []MsiSourceObservation `json:"source,omitempty" tf:"source,omitempty"`
}

type MsiParameters struct {

	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of ACTION=INSTALL REBOOT=ReallySuppress.
	// +kubebuilder:validation:Optional
	Properties []*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// Required. An rpm package.
	// +kubebuilder:validation:Required
	Source []MsiSourceParameters `json:"source" tf:"source,omitempty"`
}

type MsiSourceGcsObservation struct {

	// Required. Bucket of the Cloud Storage object.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type MsiSourceGcsParameters struct {

	// Required. Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type MsiSourceObservation struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	Gcs []MsiSourceGcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	Remote []MsiSourceRemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type MsiSourceParameters struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	// +kubebuilder:validation:Optional
	Gcs []MsiSourceGcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	// +kubebuilder:validation:Optional
	Remote []MsiSourceRemoteParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type MsiSourceRemoteObservation struct {

	// SHA256 checksum of the remote file.
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type MsiSourceRemoteParameters struct {

	// SHA256 checksum of the remote file.
	// +kubebuilder:validation:Optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type OsPoliciesObservation struct {

	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to true if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch *bool `json:"allowNoResourceGroupMatch,omitempty" tf:"allow_no_resource_group_match,omitempty"`

	// Policy description. Length of the description is limited to 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Required. Policy mode Possible values: MODE_UNSPECIFIED, VALIDATION, ENFORCEMENT
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag allow_no_resource_group_match
	ResourceGroups []ResourceGroupsObservation `json:"resourceGroups,omitempty" tf:"resource_groups,omitempty"`
}

type OsPoliciesParameters struct {

	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to true if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	// +kubebuilder:validation:Optional
	AllowNoResourceGroupMatch *bool `json:"allowNoResourceGroupMatch,omitempty" tf:"allow_no_resource_group_match,omitempty"`

	// Policy description. Length of the description is limited to 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// Required. Policy mode Possible values: MODE_UNSPECIFIED, VALIDATION, ENFORCEMENT
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag allow_no_resource_group_match
	// +kubebuilder:validation:Required
	ResourceGroups []ResourceGroupsParameters `json:"resourceGroups" tf:"resource_groups,omitempty"`
}

type OsPolicyAssignmentObservation struct {

	// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of true for this field.
	Baseline *bool `json:"baseline,omitempty" tf:"baseline,omitempty"`

	// Output only. Indicates that this revision deletes the OS policy assignment.
	Deleted *bool `json:"deleted,omitempty" tf:"deleted,omitempty"`

	// Policy description. Length of the description is limited to 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Required. Filter to select VMs.
	InstanceFilter []InstanceFilterObservation `json:"instanceFilter,omitempty" tf:"instance_filter,omitempty"`

	// The location for the resource
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Required. List of OS policies to be applied to the VMs.
	OsPolicies []OsPoliciesObservation `json:"osPolicies,omitempty" tf:"os_policies,omitempty"`

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Output only. Indicates that reconciliation is in progress for the revision. This value is true when the rollout_state is one of: * IN_PROGRESS * CANCELLING
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling,omitempty"`

	// Output only. The timestamp that the revision was created.
	RevisionCreateTime *string `json:"revisionCreateTime,omitempty" tf:"revision_create_time,omitempty"`

	// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
	RevisionID *string `json:"revisionId,omitempty" tf:"revision_id,omitempty"`

	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
	Rollout []RolloutObservation `json:"rollout,omitempty" tf:"rollout,omitempty"`

	// Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING, CANCELLED, SUCCEEDED
	RolloutState *string `json:"rolloutState,omitempty" tf:"rollout_state,omitempty"`

	// Set to true to skip awaiting rollout during resource creation and update.
	SkipAwaitRollout *bool `json:"skipAwaitRollout,omitempty" tf:"skip_await_rollout,omitempty"`

	// Output only. Server generated unique id for the OS policy assignment resource.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type OsPolicyAssignmentParameters struct {

	// Policy description. Length of the description is limited to 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Required. Filter to select VMs.
	// +kubebuilder:validation:Optional
	InstanceFilter []InstanceFilterParameters `json:"instanceFilter,omitempty" tf:"instance_filter,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Required. List of OS policies to be applied to the VMs.
	// +kubebuilder:validation:Optional
	OsPolicies []OsPoliciesParameters `json:"osPolicies,omitempty" tf:"os_policies,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
	// +kubebuilder:validation:Optional
	Rollout []RolloutParameters `json:"rollout,omitempty" tf:"rollout,omitempty"`

	// Set to true to skip awaiting rollout during resource creation and update.
	// +kubebuilder:validation:Optional
	SkipAwaitRollout *bool `json:"skipAwaitRollout,omitempty" tf:"skip_await_rollout,omitempty"`
}

type PkgObservation struct {

	// An Apt Repository.
	Apt []AptObservation `json:"apt,omitempty" tf:"apt,omitempty"`

	// A deb package file.
	Deb []DebObservation `json:"deb,omitempty" tf:"deb,omitempty"`

	// Required. The desired state the agent should maintain for this package. Possible values: DESIRED_STATE_UNSPECIFIED, INSTALLED, REMOVED
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// A package managed by GooGet.
	Googet []GoogetObservation `json:"googet,omitempty" tf:"googet,omitempty"`

	// An MSI package.
	Msi []MsiObservation `json:"msi,omitempty" tf:"msi,omitempty"`

	// An rpm package file.
	Rpm []RpmObservation `json:"rpm,omitempty" tf:"rpm,omitempty"`

	// A Yum Repository.
	Yum []YumObservation `json:"yum,omitempty" tf:"yum,omitempty"`

	// A Zypper Repository.
	Zypper []ZypperObservation `json:"zypper,omitempty" tf:"zypper,omitempty"`
}

type PkgParameters struct {

	// An Apt Repository.
	// +kubebuilder:validation:Optional
	Apt []AptParameters `json:"apt,omitempty" tf:"apt,omitempty"`

	// A deb package file.
	// +kubebuilder:validation:Optional
	Deb []DebParameters `json:"deb,omitempty" tf:"deb,omitempty"`

	// Required. The desired state the agent should maintain for this package. Possible values: DESIRED_STATE_UNSPECIFIED, INSTALLED, REMOVED
	// +kubebuilder:validation:Required
	DesiredState *string `json:"desiredState" tf:"desired_state,omitempty"`

	// A package managed by GooGet.
	// +kubebuilder:validation:Optional
	Googet []GoogetParameters `json:"googet,omitempty" tf:"googet,omitempty"`

	// An MSI package.
	// +kubebuilder:validation:Optional
	Msi []MsiParameters `json:"msi,omitempty" tf:"msi,omitempty"`

	// An rpm package file.
	// +kubebuilder:validation:Optional
	Rpm []RpmParameters `json:"rpm,omitempty" tf:"rpm,omitempty"`

	// A Yum Repository.
	// +kubebuilder:validation:Optional
	Yum []YumParameters `json:"yum,omitempty" tf:"yum,omitempty"`

	// A Zypper Repository.
	// +kubebuilder:validation:Optional
	Zypper []ZypperParameters `json:"zypper,omitempty" tf:"zypper,omitempty"`
}

type RemoteObservation struct {

	// SHA256 checksum of the remote file.
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type RemoteParameters struct {

	// SHA256 checksum of the remote file.
	// +kubebuilder:validation:Optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type RepositoryAptObservation struct {

	// Required. Type of archive files in this repository. Possible values: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC
	ArchiveType *string `json:"archiveType,omitempty" tf:"archive_type,omitempty"`

	// Required. List of components for this repository. Must contain at least one item.
	Components []*string `json:"components,omitempty" tf:"components,omitempty"`

	// Required. Distribution of this repository.
	Distribution *string `json:"distribution,omitempty" tf:"distribution,omitempty"`

	// URI of the key file for this repository. The agent maintains a keyring at /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg.
	GpgKey *string `json:"gpgKey,omitempty" tf:"gpg_key,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type RepositoryAptParameters struct {

	// Required. Type of archive files in this repository. Possible values: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC
	// +kubebuilder:validation:Required
	ArchiveType *string `json:"archiveType" tf:"archive_type,omitempty"`

	// Required. List of components for this repository. Must contain at least one item.
	// +kubebuilder:validation:Required
	Components []*string `json:"components" tf:"components,omitempty"`

	// Required. Distribution of this repository.
	// +kubebuilder:validation:Required
	Distribution *string `json:"distribution" tf:"distribution,omitempty"`

	// URI of the key file for this repository. The agent maintains a keyring at /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg.
	// +kubebuilder:validation:Optional
	GpgKey *string `json:"gpgKey,omitempty" tf:"gpg_key,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type RepositoryObservation struct {

	// An Apt Repository.
	Apt []RepositoryAptObservation `json:"apt,omitempty" tf:"apt,omitempty"`

	// A Goo Repository.
	Goo []GooObservation `json:"goo,omitempty" tf:"goo,omitempty"`

	// A Yum Repository.
	Yum []RepositoryYumObservation `json:"yum,omitempty" tf:"yum,omitempty"`

	// A Zypper Repository.
	Zypper []RepositoryZypperObservation `json:"zypper,omitempty" tf:"zypper,omitempty"`
}

type RepositoryParameters struct {

	// An Apt Repository.
	// +kubebuilder:validation:Optional
	Apt []RepositoryAptParameters `json:"apt,omitempty" tf:"apt,omitempty"`

	// A Goo Repository.
	// +kubebuilder:validation:Optional
	Goo []GooParameters `json:"goo,omitempty" tf:"goo,omitempty"`

	// A Yum Repository.
	// +kubebuilder:validation:Optional
	Yum []RepositoryYumParameters `json:"yum,omitempty" tf:"yum,omitempty"`

	// A Zypper Repository.
	// +kubebuilder:validation:Optional
	Zypper []RepositoryZypperParameters `json:"zypper,omitempty" tf:"zypper,omitempty"`
}

type RepositoryYumObservation struct {

	// Required. The location of the repository directory.
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// The display name of the repository.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// URIs of GPG keys.
	GpgKeys []*string `json:"gpgKeys,omitempty" tf:"gpg_keys,omitempty"`

	// Required. A one word, unique name for this repository. This is the repo id in the zypper config file and also the display_name if display_name is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RepositoryYumParameters struct {

	// Required. The location of the repository directory.
	// +kubebuilder:validation:Required
	BaseURL *string `json:"baseUrl" tf:"base_url,omitempty"`

	// The display name of the repository.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// URIs of GPG keys.
	// +kubebuilder:validation:Optional
	GpgKeys []*string `json:"gpgKeys,omitempty" tf:"gpg_keys,omitempty"`

	// Required. A one word, unique name for this repository. This is the repo id in the zypper config file and also the display_name if display_name is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type RepositoryZypperObservation struct {

	// Required. The location of the repository directory.
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// The display name of the repository.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// URIs of GPG keys.
	GpgKeys []*string `json:"gpgKeys,omitempty" tf:"gpg_keys,omitempty"`

	// Required. A one word, unique name for this repository. This is the repo id in the zypper config file and also the display_name if display_name is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RepositoryZypperParameters struct {

	// Required. The location of the repository directory.
	// +kubebuilder:validation:Required
	BaseURL *string `json:"baseUrl" tf:"base_url,omitempty"`

	// The display name of the repository.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// URIs of GPG keys.
	// +kubebuilder:validation:Optional
	GpgKeys []*string `json:"gpgKeys,omitempty" tf:"gpg_keys,omitempty"`

	// Required. A one word, unique name for this repository. This is the repo id in the zypper config file and also the display_name if display_name is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type ResourceGroupsObservation struct {

	// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either RHEL or CentOS operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
	InventoryFilters []InventoryFiltersObservation `json:"inventoryFilters,omitempty" tf:"inventory_filters,omitempty"`

	// Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources []ResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ResourceGroupsParameters struct {

	// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either RHEL or CentOS operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
	// +kubebuilder:validation:Optional
	InventoryFilters []InventoryFiltersParameters `json:"inventoryFilters,omitempty" tf:"inventory_filters,omitempty"`

	// Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.
	// +kubebuilder:validation:Required
	Resources []ResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type ResourcesFileObservation struct {

	// A a file with this content. The size of the content is limited to 1024 characters.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// A remote or local file.
	File []FileFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// Required. The absolute path of the file within the VM.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// Required. Desired state of the file. Possible values: OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED, COMPLIANT, NON_COMPLIANT, UNKNOWN, NO_OS_POLICIES_APPLICABLE
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ResourcesFileParameters struct {

	// A a file with this content. The size of the content is limited to 1024 characters.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// A remote or local file.
	// +kubebuilder:validation:Optional
	File []FileFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// Required. The absolute path of the file within the VM.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// Required. Desired state of the file. Possible values: OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED, COMPLIANT, NON_COMPLIANT, UNKNOWN, NO_OS_POLICIES_APPLICABLE
	// +kubebuilder:validation:Required
	State *string `json:"state" tf:"state,omitempty"`
}

type ResourcesObservation struct {

	// Exec resource
	Exec []ExecObservation `json:"exec,omitempty" tf:"exec,omitempty"`

	// A remote or local file.
	File []ResourcesFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// Required. A one word, unique name for this repository. This is the repo id in the zypper config file and also the display_name if display_name is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Package resource
	Pkg []PkgObservation `json:"pkg,omitempty" tf:"pkg,omitempty"`

	// Package repository resource
	Repository []RepositoryObservation `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ResourcesParameters struct {

	// Exec resource
	// +kubebuilder:validation:Optional
	Exec []ExecParameters `json:"exec,omitempty" tf:"exec,omitempty"`

	// A remote or local file.
	// +kubebuilder:validation:Optional
	File []ResourcesFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// Required. A one word, unique name for this repository. This is the repo id in the zypper config file and also the display_name if display_name is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// Package resource
	// +kubebuilder:validation:Optional
	Pkg []PkgParameters `json:"pkg,omitempty" tf:"pkg,omitempty"`

	// Package repository resource
	// +kubebuilder:validation:Optional
	Repository []RepositoryParameters `json:"repository,omitempty" tf:"repository,omitempty"`
}

type RolloutObservation struct {

	// Required. The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget []DisruptionBudgetObservation `json:"disruptionBudget,omitempty" tf:"disruption_budget,omitempty"`

	// Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the disruption_budget at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration *string `json:"minWaitDuration,omitempty" tf:"min_wait_duration,omitempty"`
}

type RolloutParameters struct {

	// Required. The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	// +kubebuilder:validation:Required
	DisruptionBudget []DisruptionBudgetParameters `json:"disruptionBudget" tf:"disruption_budget,omitempty"`

	// Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the disruption_budget at least until this duration of time has passed after configuration changes are applied.
	// +kubebuilder:validation:Required
	MinWaitDuration *string `json:"minWaitDuration" tf:"min_wait_duration,omitempty"`
}

type RpmObservation struct {

	// Whether dependencies should also be installed. - install when false: rpm --upgrade --replacepkgs package.rpm - install when true: yum -y install package.rpm or zypper -y install package.rpm
	PullDeps *bool `json:"pullDeps,omitempty" tf:"pull_deps,omitempty"`

	// Required. An rpm package.
	Source []RpmSourceObservation `json:"source,omitempty" tf:"source,omitempty"`
}

type RpmParameters struct {

	// Whether dependencies should also be installed. - install when false: rpm --upgrade --replacepkgs package.rpm - install when true: yum -y install package.rpm or zypper -y install package.rpm
	// +kubebuilder:validation:Optional
	PullDeps *bool `json:"pullDeps,omitempty" tf:"pull_deps,omitempty"`

	// Required. An rpm package.
	// +kubebuilder:validation:Required
	Source []RpmSourceParameters `json:"source" tf:"source,omitempty"`
}

type RpmSourceGcsObservation struct {

	// Required. Bucket of the Cloud Storage object.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type RpmSourceGcsParameters struct {

	// Required. Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type RpmSourceObservation struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	Gcs []RpmSourceGcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	Remote []RpmSourceRemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type RpmSourceParameters struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	// +kubebuilder:validation:Optional
	Gcs []RpmSourceGcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	// +kubebuilder:validation:Optional
	Remote []RpmSourceRemoteParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type RpmSourceRemoteObservation struct {

	// SHA256 checksum of the remote file.
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type RpmSourceRemoteParameters struct {

	// SHA256 checksum of the remote file.
	// +kubebuilder:validation:Optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type SourceGcsObservation struct {

	// Required. Bucket of the Cloud Storage object.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type SourceGcsParameters struct {

	// Required. Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Generation number of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	Generation *float64 `json:"generation,omitempty" tf:"generation,omitempty"`

	// Required. Name of the Cloud Storage object.
	// +kubebuilder:validation:Required
	Object *string `json:"object" tf:"object,omitempty"`
}

type SourceObservation struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	Gcs []SourceGcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	Remote []SourceRemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type SourceParameters struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	// +kubebuilder:validation:Optional
	Gcs []SourceGcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	// +kubebuilder:validation:Optional
	Remote []SourceRemoteParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type SourceRemoteObservation struct {

	// SHA256 checksum of the remote file.
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type SourceRemoteParameters struct {

	// SHA256 checksum of the remote file.
	// +kubebuilder:validation:Optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty" tf:"sha256_checksum,omitempty"`

	// Required. URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type ValidateFileObservation struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	Gcs []FileGcsObservation `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	Remote []FileRemoteObservation `json:"remote,omitempty" tf:"remote,omitempty"`
}

type ValidateFileParameters struct {

	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// A Cloud Storage object.
	// +kubebuilder:validation:Optional
	Gcs []FileGcsParameters `json:"gcs,omitempty" tf:"gcs,omitempty"`

	// A local path within the VM to use.
	// +kubebuilder:validation:Optional
	LocalPath *string `json:"localPath,omitempty" tf:"local_path,omitempty"`

	// A generic remote file.
	// +kubebuilder:validation:Optional
	Remote []FileRemoteParameters `json:"remote,omitempty" tf:"remote,omitempty"`
}

type ValidateObservation struct {

	// Optional arguments to pass to the source during execution.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// A remote or local file.
	File []ValidateFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	// Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL
	Interpreter *string `json:"interpreter,omitempty" tf:"interpreter,omitempty"`

	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath *string `json:"outputFilePath,omitempty" tf:"output_file_path,omitempty"`

	// An inline script. The size of the script is limited to 1024 characters.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`
}

type ValidateParameters struct {

	// Optional arguments to pass to the source during execution.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// A remote or local file.
	// +kubebuilder:validation:Optional
	File []ValidateFileParameters `json:"file,omitempty" tf:"file,omitempty"`

	// Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL
	// +kubebuilder:validation:Required
	Interpreter *string `json:"interpreter" tf:"interpreter,omitempty"`

	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	// +kubebuilder:validation:Optional
	OutputFilePath *string `json:"outputFilePath,omitempty" tf:"output_file_path,omitempty"`

	// An inline script. The size of the script is limited to 1024 characters.
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`
}

type YumObservation struct {

	// Required. Package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type YumParameters struct {

	// Required. Package name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type ZypperObservation struct {

	// Required. Package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ZypperParameters struct {

	// Required. Package name.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// OsPolicyAssignmentSpec defines the desired state of OsPolicyAssignment
type OsPolicyAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OsPolicyAssignmentParameters `json:"forProvider"`
}

// OsPolicyAssignmentStatus defines the observed state of OsPolicyAssignment.
type OsPolicyAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OsPolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OsPolicyAssignment is the Schema for the OsPolicyAssignments API. Represents an OSPolicyAssignment resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type OsPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.instanceFilter)",message="instanceFilter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.osPolicies)",message="osPolicies is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rollout)",message="rollout is a required parameter"
	Spec   OsPolicyAssignmentSpec   `json:"spec"`
	Status OsPolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OsPolicyAssignmentList contains a list of OsPolicyAssignments
type OsPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OsPolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	OsPolicyAssignment_Kind             = "OsPolicyAssignment"
	OsPolicyAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OsPolicyAssignment_Kind}.String()
	OsPolicyAssignment_KindAPIVersion   = OsPolicyAssignment_Kind + "." + CRDGroupVersion.String()
	OsPolicyAssignment_GroupVersionKind = CRDGroupVersion.WithKind(OsPolicyAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&OsPolicyAssignment{}, &OsPolicyAssignmentList{})
}
