/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditLogConfigObservation struct {
	ExemptedMembers []*string `json:"exemptedMembers,omitempty" tf:"exempted_members,omitempty"`

	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`
}

type AuditLogConfigParameters struct {

	// +kubebuilder:validation:Optional
	ExemptedMembers []*string `json:"exemptedMembers,omitempty" tf:"exempted_members,omitempty"`

	// +kubebuilder:validation:Required
	LogType *string `json:"logType" tf:"log_type,omitempty"`
}

type OrganizationIAMAuditConfigObservation struct {
	AuditLogConfig []AuditLogConfigObservation `json:"auditLogConfig,omitempty" tf:"audit_log_config,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type OrganizationIAMAuditConfigParameters struct {

	// +kubebuilder:validation:Optional
	AuditLogConfig []AuditLogConfigParameters `json:"auditLogConfig,omitempty" tf:"audit_log_config,omitempty"`

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

// OrganizationIAMAuditConfigSpec defines the desired state of OrganizationIAMAuditConfig
type OrganizationIAMAuditConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationIAMAuditConfigParameters `json:"forProvider"`
}

// OrganizationIAMAuditConfigStatus defines the observed state of OrganizationIAMAuditConfig.
type OrganizationIAMAuditConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationIAMAuditConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationIAMAuditConfig is the Schema for the OrganizationIAMAuditConfigs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type OrganizationIAMAuditConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.auditLogConfig)",message="auditLogConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.orgId)",message="orgId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.service)",message="service is a required parameter"
	Spec   OrganizationIAMAuditConfigSpec   `json:"spec"`
	Status OrganizationIAMAuditConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationIAMAuditConfigList contains a list of OrganizationIAMAuditConfigs
type OrganizationIAMAuditConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationIAMAuditConfig `json:"items"`
}

// Repository type metadata.
var (
	OrganizationIAMAuditConfig_Kind             = "OrganizationIAMAuditConfig"
	OrganizationIAMAuditConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationIAMAuditConfig_Kind}.String()
	OrganizationIAMAuditConfig_KindAPIVersion   = OrganizationIAMAuditConfig_Kind + "." + CRDGroupVersion.String()
	OrganizationIAMAuditConfig_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationIAMAuditConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationIAMAuditConfig{}, &OrganizationIAMAuditConfigList{})
}
